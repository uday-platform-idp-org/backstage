name: Backstage CI-CD Ultra-Paralelo Total

permissions:
  contents: read
  security-events: write

on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'backstage-app/**'
      - 'helm-chart/**'
  pull_request:
    branches:
      - dev
    paths:
      - 'backstage-app/**'
      - 'helm-chart/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Escolha o ambiente para deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

jobs:
  lint:
    name: Lint Helm Chart
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.12.0'
      - name: Lint Helm Chart
        run: helm lint helm-chart/
      - name: Validate Helm Templates
        run: helm template backstage helm-chart/ --debug --dry-run

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'helm-chart/'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  build-backend:
    name: Build & Push Backend
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4

      - name: Cache Yarn
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/yarn
            ~/.yarn
          key: yarn-cache-backend-${{ hashFiles('backstage-app/yarn.lock') }}

      - name: Install dependencies and build backend
        working-directory: ./backstage-app/packages/backend
        run: |
          yarn install
          yarn build:backend

      - id: set-backend-tag
        run: |
          IMAGE_TAG="v$(echo $GITHUB_SHA | cut -c1-7)"
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push Docker Image (Backend)
        uses: docker/build-push-action@v5
        with:
          context: ./backstage-app/packages/backend
          file: ./backstage-app/packages/backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/backstage-backend:${{ steps.set-backend-tag.outputs.tag }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/backstage-backend:cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/backstage-backend:cache,mode=max

  build-frontend:
    name: Build & Push Frontend
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4

      - name: Cache Yarn
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/yarn
            ~/.yarn
          key: yarn-cache-frontend-${{ hashFiles('backstage-app/yarn.lock') }}

      - name: Install dependencies and build frontend
        working-directory: ./backstage-app/packages/app
        run: |
          yarn install
          yarn build:frontend

      - id: set-frontend-tag
        run: |
          IMAGE_TAG="v$(echo $GITHUB_SHA | cut -c1-7)"
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push Docker Image (Frontend)
        uses: docker/build-push-action@v5
        with:
          context: ./backstage-app/packages/app
          file: ./backstage-app/packages/app/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/backstage-frontend:${{ steps.set-frontend-tag.outputs.tag }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/backstage-frontend:cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/backstage-frontend:cache,mode=max

  update-helm-values:
    name: Update Helm Chart Values
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    steps:
      - uses: actions/checkout@v4
      - name: Update values.yaml with new image tags
        run: |
          BACKEND_TAG=${{ needs.build-backend.outputs.tag }}
          FRONTEND_TAG=${{ needs.build-frontend.outputs.tag }}
          sed -i "s|repository:.*backend.*|repository: ${{ secrets.DOCKERHUB_USERNAME }}/backstage-backend|" helm-chart/values.yaml
          sed -i "s|tag:.*backend.*|tag: $BACKEND_TAG|" helm-chart/values.yaml
          sed -i "s|repository:.*frontend.*|repository: ${{ secrets.DOCKERHUB_USERNAME }}/backstage-frontend|" helm-chart/values.yaml
          sed -i "s|tag:.*frontend.*|tag: $FRONTEND_TAG|" helm-chart/values.yaml

  deploy:
    name: Deploy to ArgoCD
    runs-on: ubuntu-latest
    needs: [lint, security-scan, update-helm-values]
    steps:
      - uses: actions/checkout@v4
      - name: Install ArgoCD CLI
        run: |
          sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo chmod +x /usr/local/bin/argocd
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [[ "${GITHUB_REF##*/}" == "main" ]]; then
            ENV="prod"
          else
            ENV="dev"
          fi
          echo "env=$ENV" >> $GITHUB_OUTPUT
      - name: ArgoCD Login
        run: |
          argocd login argocd.uday.com.br:9092 --insecure --grpc-web --username admin --password ${{ secrets.ARGOCD_PASSWORD }}
      - name: Sync Apps
        run: |
          for APP in backend frontend; do
            argocd app sync backstage-$APP-${{ steps.env.outputs.env }}
            argocd app wait backstage-$APP-${{ steps.env.outputs.env }} --timeout 300