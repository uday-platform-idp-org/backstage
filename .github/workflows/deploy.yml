name: Backstage CI-CD

permissions:
  contents: read
  security-events: write

on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'backstage-app/**'
      - 'helm-chart/**'
  pull_request:
    branches:
      - dev
    paths:
      - 'backstage-app/**'
      - 'helm-chart/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Escolha o ambiente para deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

jobs:
  lint-and-validate:
    name: Lint and Validate Helm Chart
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.12.0'

      - name: Lint Helm Chart
        run: helm lint helm-chart/

      - name: Validate Helm Templates
        run: helm template backstage helm-chart/ --debug --dry-run

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-validate
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'helm-chart/'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        if: github.repository == 'seu-usuario/seu-repositorio'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-validate, security-scan]
    outputs:
      image_tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3

      - id: set-tag
        run: |
          image_tag="v$(echo $GITHUB_SHA | cut -c1-7)"
          echo "tag=$image_tag" >> $GITHUB_OUTPUT

      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/backstage:${{ steps.set-tag.outputs.tag }} -f backstage-app/Dockerfile backstage-app/
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/backstage:${{ steps.set-tag.outputs.tag }}
        shell: bash

  deploy:
    name: Deploy to ArgoCD
    runs-on: ubuntu-latest
    needs: [build-and-push-image]
    steps:
      - uses: actions/checkout@v4

      - name: Update Helm Chart with new image
        run: |
          IMAGE_TAG=${{ needs.build-and-push-image.outputs.image_tag }}
          echo "Updating helm-chart values.yaml with image tag $IMAGE_TAG"
          sed -i "s|repository:.*|repository: ${{ secrets.DOCKERHUB_USERNAME }}/backstage|" helm-chart/values.yaml
          sed -i "s|tag:.*|tag: $IMAGE_TAG|" helm-chart/values.yaml

      - name: Determine Deployment Environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
          elif [[ "${GITHUB_REF##*/}" == "main" ]]; then
            ENV="prod"
          else
            ENV="dev"
          fi
          APP_NAME="backstage-$ENV"
          echo "env=$ENV" >> $GITHUB_OUTPUT
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "Deploying to environment $ENV (App: $APP_NAME)"

      - name: ArgoCD Login
        run: |
          argocd login argocd.uday.com.br:9092 \
            --insecure \
            --grpc-web \
            --username admin \
            --password ${{ secrets.ARGOCD_PASSWORD }}

      - name: Sync Backstage
        run: |
          argocd app sync ${{ steps.env.outputs.app_name }}
          argocd app wait ${{ steps.env.outputs.app_name }} --timeout 300