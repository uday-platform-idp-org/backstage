name: Backstage CI-CD Ultra-Paralelo

permissions:
  contents: read
  security-events: write

on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'backstage-app/**'
      - 'frontend-app/**'
      - 'helm-chart/**'
  pull_request:
    branches:
      - dev
    paths:
      - 'backstage-app/**'
      - 'frontend-app/**'
      - 'helm-chart/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Escolha o ambiente para deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

jobs:
  lint-and-validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.12.0'
      - name: Lint Helm Chart
        run: helm lint helm-chart/
      - name: Validate Helm Templates
        run: helm template backstage helm-chart/ --debug --dry-run

  security-scan:
    runs-on: ubuntu-latest
    needs: lint-and-validate
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'helm-chart/'
          format: 'sarif'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Apps
    runs-on: ubuntu-latest
    needs: [lint-and-validate, security-scan]
    strategy:
      matrix:
        app: [backend, frontend]
    outputs:
      image_tag: ${{ steps.set-tag.outputs.tag }}
    steps:
      - uses: actions/checkout@v3

      - name: Cache Yarn
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/yarn
            ~/.yarn
          key: yarn-cache-${{ matrix.app }}-${{ hashFiles('backstage-app/yarn.lock') }}
          restore-keys: |
            yarn-cache-${{ matrix.app }}-

      - name: Install dependencies and build
        working-directory: ${{ matrix.app == 'backend' && './backstage-app' || './frontend-app' }}
        run: |
          yarn install
          if [ "${{ matrix.app }}" == "backend" ]; then
            yarn tsc
            yarn build:backend
          else
            yarn build:frontend
          fi

      - id: set-tag
        run: |
          IMAGE_TAG="v$(echo $GITHUB_SHA | cut -c1-7)"
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker Image with Cache
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.app == 'backend' && './backstage-app' || './frontend-app' }}
          file: ${{ matrix.app == 'backend' && './backstage-app/Dockerfile' || './frontend-app/Dockerfile' }}
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/backstage-${{ matrix.app }}:${{ steps.set-tag.outputs.tag }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/backstage-${{ matrix.app }}:cache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/backstage-${{ matrix.app }}:cache,mode=max

  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref != 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Install ArgoCD CLI
        run: |
          sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo chmod +x /usr/local/bin/argocd
      - name: Sync Apps to Dev
        run: |
          for APP in backend frontend; do
            argocd login argocd.uday.com.br:9092 --insecure --grpc-web --username admin --password ${{ secrets.ARGOCD_PASSWORD }}
            argocd app sync backstage-$APP-dev
            argocd app wait backstage-$APP-dev --timeout 300
          done

  deploy-prod:
    name: Deploy to Prod
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    steps:
      - uses: actions/checkout@v4
      - name: Install ArgoCD CLI
        run: |
          sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo chmod +x /usr/local/bin/argocd
      - name: Sync Apps to Prod
        run: |
          for APP in backend frontend; do
            argocd login argocd.uday.com.br:9092 --insecure --grpc-web --username admin --password ${{ secrets.ARGOCD_PASSWORD }}
            argocd app sync backstage-$APP-prod
            argocd app wait backstage-$APP-prod --timeout 300
          done